const Redis = require('ioredis')
const { promisify } = require('util')

const redis = new Redis(process.env.REDIS_URL)

const getAsync = promisify(redis.get).bind(redis)
const setAsync = promisify(redis.set).bind(redis)

const cache = (duration) => {
  return async (req, res, next) => {
    if (req.method !== 'GET') {
      return next()
    }

    const key = `__express__${req.originalUrl || req.url}`
    
    try {
      const cachedResponse = await getAsync(key)
      
      if (cachedResponse) {
        const data = JSON.parse(cachedResponse)
        return res.json(data)
      }

      // Store original res.json
      const originalJson = res.json

      // Override res.json method
      res.json = function(body) {
        // Restore original res.json
        res.json = originalJson

        // Cache the response
        setAsync(key, JSON.stringify(body), 'EX', duration)
          .catch(err => console.error('Redis cache error:', err))

        // Send response
        return originalJson.call(this, body)
      }

      next()
    } catch (error) {
      console.error('Cache middleware error:', error)
      next()
    }
  }
}

// Clear cache for specific routes
const clearCache = (pattern) => {
  return async (req, res, next) => {
    try {
      const keys = await redis.keys(pattern)
      if (keys.length > 0) {
        await redis.del(keys)
      }
      next()
    } catch (error) {
      console.error('Clear cache error:', error)
      next()
    }
  }
}

module.exports = {
  cache,
  clearCache,
  redis
} 